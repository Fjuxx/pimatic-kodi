// Generated by CoffeeScript 1.9.1
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = function(env) {
  var KodiNextActionHandler, KodiNextActionProvider, KodiPauseActionHandler, KodiPauseActionProvider, KodiPlayActionHandler, KodiPlayActionProvider, KodiPlayer, KodiPlugin, KodiPrevActionHandler, KodiPrevActionProvider, M, PlayingPredicateHandler, PlayingPredicateProvider, Promise, TCPConnection, VERBOSE, XbmcApi, _, assert, kodiPlugin, ref;
  Promise = env.require('bluebird');
  assert = env.require('cassert');
  ref = require('xbmc'), TCPConnection = ref.TCPConnection, XbmcApi = ref.XbmcApi;
  VERBOSE = false;
  M = env.matcher;
  _ = env.require('lodash');
  KodiPlugin = (function(superClass) {
    extend(KodiPlugin, superClass);

    function KodiPlugin() {
      this.init = bind(this.init, this);
      return KodiPlugin.__super__.constructor.apply(this, arguments);
    }

    KodiPlugin.prototype.init = function(app, framework, config1) {
      var deviceConfigDef;
      this.framework = framework;
      this.config = config1;
      env.logger.info("Kodi plugin started");
      deviceConfigDef = require("./device-config-schema");
      this.framework.deviceManager.registerDeviceClass("KodiPlayer", {
        configDef: deviceConfigDef.KodiPlayer,
        createCallback: (function(_this) {
          return function(config) {
            return new KodiPlayer(config);
          };
        })(this)
      });
      this.framework.ruleManager.addActionProvider(new KodiPauseActionProvider(this.framework));
      this.framework.ruleManager.addActionProvider(new KodiPlayActionProvider(this.framework));
      this.framework.ruleManager.addActionProvider(new KodiPrevActionProvider(this.framework));
      this.framework.ruleManager.addActionProvider(new KodiNextActionProvider(this.framework));
      return this.framework.ruleManager.addPredicateProvider(new PlayingPredicateProvider(this.framework));
    };

    return KodiPlugin;

  })(env.plugins.Plugin);
  KodiPlayer = (function(superClass) {
    extend(KodiPlayer, superClass);

    KodiPlayer.prototype._state = "stopped";

    KodiPlayer.prototype._currentTitle = null;

    KodiPlayer.prototype._currentArtist = null;

    KodiPlayer.prototype._volume = null;

    KodiPlayer.prototype.connection = null;

    KodiPlayer.prototype.kodi = null;

    KodiPlayer.prototype.connection = null;

    KodiPlayer.prototype.actions = {
      play: {
        description: "starts playing"
      },
      pause: {
        description: "pauses playing"
      },
      stop: {
        description: "stops playing"
      },
      next: {
        description: "play next song"
      },
      previous: {
        description: "play previous song"
      },
      volume: {
        description: "Change volume of player"
      }
    };

    KodiPlayer.prototype.attributes = {
      currentArtist: {
        description: "the current playing track artist",
        type: "string"
      },
      currentTitle: {
        description: "the current playing track title",
        type: "string"
      },
      state: {
        description: "the current state of the player",
        type: "string"
      },
      volume: {
        description: "the volume of the player",
        type: "string"
      }
    };

    KodiPlayer.prototype.template = "musicplayer";

    function KodiPlayer(config1) {
      var _state, connection;
      this.config = config1;
      this.name = this.config.name;
      this.id = this.config.id;
      connection = new TCPConnection({
        host: this.config.host,
        port: this.config.port
      });
      _state = 'stopped';
      this.kodi = new XbmcApi;
      this.kodi.setConnection(connection);
      this.kodi.on('connection:open', (function(_this) {
        return function() {
          env.logger.info('Kodi connected');
          return _this._updateInfo();
        };
      })(this));
      this.kodi.on('connection:close', (function(_this) {
        return function() {
          return setTimeout(function() {
            env.logger.info('Kodi Disconnected, Attempting reconnect');
            connection = new TCPConnection({
              host: _this.config.host,
              port: _this.config.port,
              verbose: VERBOSE
            });
            return _this.kodi.setConnection(connection);
          }, 60000);
        };
      })(this));
      this.kodi.on('connection:notification', (function(_this) {
        return function(notification) {
          return env.logger.debug('Received notification:', notification);
        };
      })(this));
      this.kodi.on('notification:play', (function(_this) {
        return function(data) {
          _this._setState('playing');
          env.logger.debug('onPlay data: ', data.params.data.item);
          return _this._parseItem(data.params.data.item);
        };
      })(this));
      this.kodi.on('notification:pause', (function(_this) {
        return function() {
          return _this._setState('paused');
        };
      })(this));
      this.kodi.on('api:playerStopped', (function(_this) {
        return function() {
          _this._setState('stopped');
          _this._setCurrentTitle("");
          return _this._setCurrentArtist("");
        };
      })(this));
      KodiPlayer.__super__.constructor.call(this);
    }

    KodiPlayer.prototype.getState = function() {
      return Promise.resolve(this._state);
    };

    KodiPlayer.prototype.getCurrentTitle = function() {
      return Promise.resolve(this._currentTitle);
    };

    KodiPlayer.prototype.getCurrentArtist = function() {
      return Promise.resolve(this._currentTitle);
    };

    KodiPlayer.prototype.getVolume = function() {
      return Promise.resolve(this._volume);
    };

    KodiPlayer.prototype.play = function() {
      return this.kodi.player.playPause();
    };

    KodiPlayer.prototype.pause = function() {
      return this.kodi.player.playPause();
    };

    KodiPlayer.prototype.stop = function() {
      return this.kodi.player.stop();
    };

    KodiPlayer.prototype.previous = function() {
      return this.kodi.player.previous();
    };

    KodiPlayer.prototype.next = function() {
      return this.kodi.player.next();
    };

    KodiPlayer.prototype.setVolume = function(volume) {
      return env.logger.debug('setVolume not implemented');
    };

    KodiPlayer.prototype._updateInfo = function() {
      return Promise.all([this._getStatus(), this._getCurrentSong()]);
    };

    KodiPlayer.prototype._setState = function(state) {
      if (this._state !== state) {
        this._state = state;
        return this.emit('state', state);
      }
    };

    KodiPlayer.prototype._setCurrentTitle = function(title) {
      if (this._currentTitle !== title) {
        this._currentTitle = title;
        return this.emit('currentTitle', title);
      }
    };

    KodiPlayer.prototype._setCurrentArtist = function(artist) {
      if (this._currentArtist !== artist) {
        this._currentArtist = artist;
        return this.emit('currentArtist', artist);
      }
    };

    KodiPlayer.prototype._setVolume = function(volume) {
      if (this._volume !== volume) {
        this._volume = volume;
        return this.emit('volume', volume);
      }
    };

    KodiPlayer.prototype._getStatus = function() {
      return env.logger.debug('get status ignored');
    };

    KodiPlayer.prototype._getCurrentSong = function() {
      env.logger.debug('_getCurrentSong ');
      return this.kodi.player.getCurrentlyPlaying((function(_this) {
        return function(info) {
          env.logger.debug(info);
          _this._setCurrentTitle(info.title != null ? info.title : "");
          return _this._setCurrentArtist(info.artist != null ? info.artist : "");
        };
      })(this));
    };

    KodiPlayer.prototype._sendCommandAction = function(action) {
      return this.kodi.input.ExecuteAction(action);
    };

    KodiPlayer.prototype._parseItem = function(itm) {
      var artist, ref1, ref2, ref3, title, type;
      if (itm != null) {
        artist = (ref1 = (ref2 = itm.artist) != null ? ref2[0] : void 0) != null ? ref1 : itm.artist;
        title = itm.title;
        type = (ref3 = itm.type) != null ? ref3 : '';
        env.logger.debug(title);
        if (type === 'song' || ((title != null) && (artist != null))) {
          this._setCurrentTitle(title != null ? title : "");
          return this._setCurrentArtist(artist != null ? artist : "");
        } else {
          return this._updateInfo();
        }
      }
    };

    return KodiPlayer;

  })(env.devices.Device);
  KodiPauseActionProvider = (function(superClass) {
    extend(KodiPauseActionProvider, superClass);

    function KodiPauseActionProvider(framework) {
      this.framework = framework;
      this.parseAction = bind(this.parseAction, this);
    }


    /*
    This function handles action in the form of `execute "some string"`
     */

    KodiPauseActionProvider.prototype.parseAction = function(input, context) {
      var device, kodiPlayers, m, match, onDeviceMatch, retVar;
      retVar = null;
      kodiPlayers = _(this.framework.deviceManager.devices).values().filter((function(_this) {
        return function(device) {
          return device.hasAction("play");
        };
      })(this)).value();
      if (kodiPlayers.length === 0) {
        return;
      }
      device = null;
      match = null;
      onDeviceMatch = (function(m, d) {
        device = d;
        return match = m.getFullMatch();
      });
      m = M(input, context).match('pause ').matchDevice(kodiPlayers, onDeviceMatch);
      if (match != null) {
        assert(device != null);
        assert(typeof match === "string");
        return {
          token: match,
          nextInput: input.substring(match.length),
          actionHandler: new KodiPauseActionHandler(device)
        };
      } else {
        return null;
      }
    };

    return KodiPauseActionProvider;

  })(env.actions.ActionProvider);
  KodiPauseActionHandler = (function(superClass) {
    extend(KodiPauseActionHandler, superClass);

    function KodiPauseActionHandler(device1) {
      this.device = device1;
      this.executeAction = bind(this.executeAction, this);
    }

    KodiPauseActionHandler.prototype.executeAction = function(simulate) {
      return (simulate ? Promise.resolve(__("would pause %s", this.device.name)) : this.device.pause().then((function(_this) {
        return function() {
          return __("paused %s", _this.device.name);
        };
      })(this)));
    };

    return KodiPauseActionHandler;

  })(env.actions.ActionHandler);
  KodiPlayActionProvider = (function(superClass) {
    extend(KodiPlayActionProvider, superClass);

    function KodiPlayActionProvider(framework) {
      this.framework = framework;
      this.parseAction = bind(this.parseAction, this);
    }


    /*
    This function handles action in the form of `execute "some string"`
     */

    KodiPlayActionProvider.prototype.parseAction = function(input, context) {
      var device, kodiPlayers, m, match, onDeviceMatch, retVar;
      retVar = null;
      kodiPlayers = _(this.framework.deviceManager.devices).values().filter((function(_this) {
        return function(device) {
          return device.hasAction("play");
        };
      })(this)).value();
      if (kodiPlayers.length === 0) {
        return;
      }
      device = null;
      match = null;
      onDeviceMatch = (function(m, d) {
        device = d;
        return match = m.getFullMatch();
      });
      m = M(input, context).match('play ').matchDevice(kodiPlayers, onDeviceMatch);
      if (match != null) {
        assert(device != null);
        assert(typeof match === "string");
        return {
          token: match,
          nextInput: input.substring(match.length),
          actionHandler: new KodiPlayActionHandler(device)
        };
      } else {
        return null;
      }
    };

    return KodiPlayActionProvider;

  })(env.actions.ActionProvider);
  KodiPlayActionHandler = (function(superClass) {
    extend(KodiPlayActionHandler, superClass);

    function KodiPlayActionHandler(device1) {
      this.device = device1;
      this.executeAction = bind(this.executeAction, this);
    }

    KodiPlayActionHandler.prototype.executeAction = function(simulate) {
      return (simulate ? Promise.resolve(__("would play %s", this.device.name)) : this.device.play().then((function(_this) {
        return function() {
          return __("playing %s", _this.device.name);
        };
      })(this)));
    };

    return KodiPlayActionHandler;

  })(env.actions.ActionHandler);
  KodiNextActionProvider = (function(superClass) {
    extend(KodiNextActionProvider, superClass);

    function KodiNextActionProvider(framework) {
      this.framework = framework;
      this.parseAction = bind(this.parseAction, this);
    }


    /*
    This function handles action in the form of `execute "some string"`
     */

    KodiNextActionProvider.prototype.parseAction = function(input, context) {
      var device, kodiPlayers, m, match, onDeviceMatch, retVar, valueTokens, volume;
      retVar = null;
      volume = null;
      kodiPlayers = _(this.framework.deviceManager.devices).values().filter((function(_this) {
        return function(device) {
          return device.hasAction("play");
        };
      })(this)).value();
      if (kodiPlayers.length === 0) {
        return;
      }
      device = null;
      valueTokens = null;
      match = null;
      onDeviceMatch = (function(m, d) {
        device = d;
        return match = m.getFullMatch();
      });
      m = M(input, context).match(['play next', 'next ']).match(" song ", {
        optional: true
      }).match("on ").matchDevice(kodiPlayers, onDeviceMatch);
      if (match != null) {
        assert(device != null);
        assert(typeof match === "string");
        return {
          token: match,
          nextInput: input.substring(match.length),
          actionHandler: new KodiNextActionHandler(device)
        };
      } else {
        return null;
      }
    };

    return KodiNextActionProvider;

  })(env.actions.ActionProvider);
  KodiNextActionHandler = (function(superClass) {
    extend(KodiNextActionHandler, superClass);

    function KodiNextActionHandler(device1) {
      this.device = device1;
      this.executeAction = bind(this.executeAction, this);
    }

    KodiNextActionHandler.prototype.executeAction = function(simulate) {
      return (simulate ? Promise.resolve(__("would play next track of %s", this.device.name)) : this.device.next().then((function(_this) {
        return function() {
          return __("play next track of %s", _this.device.name);
        };
      })(this)));
    };

    return KodiNextActionHandler;

  })(env.actions.ActionHandler);
  KodiPrevActionProvider = (function(superClass) {
    extend(KodiPrevActionProvider, superClass);

    function KodiPrevActionProvider(framework) {
      this.framework = framework;
      this.parseAction = bind(this.parseAction, this);
    }


    /*
    This function handles action in the form of `execute "some string"`
     */

    KodiPrevActionProvider.prototype.parseAction = function(input, context) {
      var device, kodiPlayers, m, match, onDeviceMatch, retVar, valueTokens, volume;
      retVar = null;
      volume = null;
      kodiPlayers = _(this.framework.deviceManager.devices).values().filter((function(_this) {
        return function(device) {
          return device.hasAction("play");
        };
      })(this)).value();
      if (kodiPlayers.length === 0) {
        return;
      }
      device = null;
      valueTokens = null;
      match = null;
      onDeviceMatch = (function(m, d) {
        device = d;
        return match = m.getFullMatch();
      });
      m = M(input, context).match(['play previous', 'previous ']).match(" song ", {
        optional: true
      }).match("on ").matchDevice(kodiPlayers, onDeviceMatch);
      if (match != null) {
        assert(device != null);
        assert(typeof match === "string");
        return {
          token: match,
          nextInput: input.substring(match.length),
          actionHandler: new KodiNextActionHandler(device)
        };
      } else {
        return null;
      }
    };

    return KodiPrevActionProvider;

  })(env.actions.ActionProvider);
  KodiPrevActionHandler = (function(superClass) {
    extend(KodiPrevActionHandler, superClass);

    function KodiPrevActionHandler(device1) {
      this.device = device1;
      this.executeAction = bind(this.executeAction, this);
    }

    KodiPrevActionHandler.prototype.executeAction = function(simulate) {
      return (simulate ? Promise.resolve(__("would play previous track of %s", this.device.name)) : this.device.previous().then((function(_this) {
        return function() {
          return __("play previous track of %s", _this.device.name);
        };
      })(this)));
    };

    return KodiPrevActionHandler;

  })(env.actions.ActionHandler);
  PlayingPredicateProvider = (function(superClass) {
    extend(PlayingPredicateProvider, superClass);

    function PlayingPredicateProvider(framework) {
      this.framework = framework;
    }

    PlayingPredicateProvider.prototype.parsePredicate = function(input, context) {
      var device, kodiDevices, match, negated, state;
      kodiDevices = _(this.framework.deviceManager.devices).values().filter((function(_this) {
        return function(device) {
          return device.hasAttribute('state');
        };
      })(this)).value();
      device = null;
      state = null;
      negated = null;
      match = null;
      M(input, context).matchDevice(kodiDevices, (function(_this) {
        return function(next, d) {
          return next.match([' is', ' reports', ' signals']).match([' playing', ' stopped', ' paused', ' not playing'], function(m, s) {
            if ((device != null) && device.id !== d.id) {
              if (context != null) {
                context.addError("\"" + (input.trim()) + "\" is ambiguous.");
              }
              return;
            }
            device = d;
            state = s.trim();
            return match = m.getFullMatch();
          });
        };
      })(this));
      if (match != null) {
        assert(device != null);
        assert(state != null);
        assert(typeof match === "string");
        return {
          token: match,
          nextInput: input.substring(match.length),
          predicateHandler: new PlayingPredicateHandler(device, state)
        };
      } else {
        return null;
      }
    };

    return PlayingPredicateProvider;

  })(env.predicates.PredicateProvider);
  PlayingPredicateHandler = (function(superClass) {
    extend(PlayingPredicateHandler, superClass);

    function PlayingPredicateHandler(device1, state1) {
      this.device = device1;
      this.state = state1;
    }

    PlayingPredicateHandler.prototype.setup = function() {
      this.playingListener = (function(_this) {
        return function(p) {
          env.logger.debug("checking for: " + _this.state + " == " + p);
          if (_this.state === p) {
            return _this.emit('change', _this.state === p);
          } else if (_this.state === "not playing") {
            return _this.emit('change', p !== "playing");
          }
        };
      })(this);
      this.device.on('state', this.playingListener);
      return PlayingPredicateHandler.__super__.setup.call(this);
    };

    PlayingPredicateHandler.prototype.getValue = function() {
      return this.device.getUpdatedAttributeValue('state').then((function(_this) {
        return function(p) {
          if (_this.state === p) {
            return !p;
          } else {
            return p;
          }
        };
      })(this));
    };

    PlayingPredicateHandler.prototype.destroy = function() {
      this.device.removeListener("state", this.playingListener);
      return PlayingPredicateHandler.__super__.destroy.call(this);
    };

    PlayingPredicateHandler.prototype.getType = function() {
      return 'state';
    };

    return PlayingPredicateHandler;

  })(env.predicates.PredicateHandler);
  kodiPlugin = new KodiPlugin;
  return kodiPlugin;
};
